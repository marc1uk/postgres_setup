#!/bin/bash
#set -x
trap "echo 'Aborted'; exit 1" SIGINT

alias dialog='dialog --backtitle "Postgres Setup" --aspect 100 --cr-wrap'

# construct the set of commands to execute, to be stored for posterity
BUILDSTEPS=build_steps.sh
echo "" > ${BUILDSTEPS}

DATABASES=$(ls ./dbstructure)
let i=0
for DB in ${DATABASES[@]}; do
	# strip preceding 'dbstructure/' from directory names
	NEXT=$(basename "${DB}");
	
	# confirm
	CMD="CREATE DATABASE ${NEXT}"
	dialog --extra-button --extra-label "Skip" --yesno "create database ${NEXT}?" 20 80
	RET=$?
	if [ $RET -eq 1 ]; then
		echo "Aborted"
		exit 1
	elif [ $RET -eq 3 ]; then
		echo "Skipping database ${NEXT}"
	else
		# create the databases
		echo "Creating database ${NEXT}"
		DBARRAY[$i]=${NEXT}
		# check if it already exists first, otherwise it'll error
		#psql --list -t | sed -z 's/+\n/+/g' | cut -d ' ' -f 2 | grep -w ${NEXT}
		# explan: sed command removes psql line wrapping. cut then extracts first field (db name)
		# then grep -w matches only whole word, so dbname must be a complete exact match.
		#if [ $? -ne 0 ]; then
			# no match: db doesn't exist
			RET=$(sudo -E -u postgres createdb ${NEXT} 2>&1)
			#psql -U postgres -c "${CMD}"
			if [ $? -ne 0 ]; then
				if [ `echo "${RET}" | grep "already exists" &>/dev/null; echo $?` -eq 0 ]; then
					echo "Database ${NEXT} already exists"
					# TODO ask to drop and recreate it?
				else
					dialog --msgbox "Error '${RET}' creating database ${NEXT}" 20 80
					exit 1
				fi
			fi
		#fi
	fi
	let i=$i+1
done

# loop over the databases in our cluster;
# for example there may be a run database and a monitoring database
for NEXTDB in ${DBARRAY[@]}; do
	
	# loop over the tables in this db:
	for TABLE in $(ls ./dbstructure/${NEXTDB}); do
		# clear build steps
		echo "" > $BUILDSTEPS
		
		# strip trailing '.txt' from filename to get table name
		TABLE=${TABLE%%.txt}
		
		#echo "Making table $TABLE"
		echo "CREATE TABLE $TABLE (" >> ${BUILDSTEPS}
		
		#echo "adding columns...";
		FIRSTLINE="1";
		while read COLUMN; do
			if [ "$FIRSTLINE" == "1" ]; then
				FIRSTLINE="0"
			else
				echo "," >> ${BUILDSTEPS};
			fi
			IFS=' ' read -r NAME TYPE <<<$COLUMN
			#NEXTCOLUMN="   $NAME $TYPE";
			NEXTCOLUMN="${COLUMN}"   # preserve any qualifiers the user specifies e.g.
			# "CREATE TABLE auxiliary ( id integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
			#                           name text NOT NULL CHECK (name <> ''),
			#                           version integer);"
			# TODO strip duplicates if the user already specifies these for 'id' column
			if [ "$NAME" == "id" ]; then
				NEXTCOLUMN="${NEXTCOLUMN} PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY";
			else
				NEXTCOLUMN="${NEXTCOLUMN}"
			fi
			echo "${NEXTCOLUMN}";
			echo -n "${NEXTCOLUMN}" >> ${BUILDSTEPS}
		done < ./dbstructure/${NEXTDB}/${TABLE}.txt
		
		echo "" >> ${BUILDSTEPS}
		echo ");" >> ${BUILDSTEPS}
		echo "" >> ${BUILDSTEPS}
		
		echo "" >> ${BUILDSTEPS}
		
		# prompt user to confirm.
		# TODO allow checking for existing tables and the option
		# to automatically skip creating the table if it exists
		#echo "please inspect ${BUILDSTEPS}. Do you wish to continue with these actions?"
		dialog --title "Check steps. Use h,j,k,l to scroll. Press ESC to abort" \
		       --extra-button --extra-label "Skip" --textbox "${BUILDSTEPS}" 20 80
		# for some annoying reason file display boxes can't have 3 buttons
		RET=$?
		if [ $RET -eq 255 ]; then
			# user hit ESC.
			echo "Aborted"
			exit 1
		elif [ $RET -eq 3 ]; then
			# user hit Skip
			continue;
		fi  # else user hit OK - continue
		
		# carry out the command
		tr '\n' ' ' < ${BUILDSTEPS} | sudo -E -u postgres psql -U postgres -d "dbname=${NEXTDB}"
		
		# check for error
		if [ $? -ne 0 ]; then
			# TODO error handling? (optional) early exit? other?
			dialog --infobox "Error performing build steps" 20 80
			exit 1
		fi
		
	done  # end loop over tables (files in this database folder)
	
	dialog --msgbox "`echo "Completed table creation. Resulting structure:\n" \
	                       "$(echo \"\dt\" | sudo -E -u postgres psql -d \"dbname=${NEXTDB}\")"`" 20 80
	
done  # end loop over databases (folders in ./dbstructure)

# cleanup
rm ${BUILDSTEPS}

